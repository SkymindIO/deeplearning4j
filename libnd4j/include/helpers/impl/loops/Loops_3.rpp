/*******************************************************************************
 * Copyright (c) 2015-2018 Skymind, Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/

#include "helpers/Loops.hpp"

using namespace simdOps;

namespace nd4j {

    template <typename X>
    template <typename OpType>
    void ReduceSameWrapper<X>::wrapper(const X *x, const Nd4jLong *xShapeInfo, X *z, const Nd4jLong *zShapeInfo, const Nd4jLong *tadShapeInfo, const Nd4jLong *tadOffset, const int* dimsToExclude, int dimsLen, X *extras) {
        nd4j::Loops::loopTadXZ<X, X, X, OpType>(x, xShapeInfo, z, zShapeInfo, tadShapeInfo, tadOffset, dimsToExclude, dimsLen, extras);
    }

    template <typename X>
    void ReduceSameWrapper<X>::wrap(const int opNum, const X *x, const Nd4jLong* xShapeInfo, X *z, const Nd4jLong *zShapeInfo,  const Nd4jLong *tadShapeInfo, const Nd4jLong *tadOffset, const int* dimsToExclude, int dimsLen, X *extras) {
        DISPATCH_BY_OPNUM_T(wrapper, PARAMS(x, xShapeInfo, z, zShapeInfo,  tadShapeInfo, tadOffset, dimsToExclude, dimsLen, extras), REDUCE_SAME_OPS);
    }
    //BUILD_SINGLE_TEMPLATE(template class ReduceSameWrapper, , FLOAT_TYPES);
    //BUILD_SINGLE_TEMPLATE(template class ReduceSameWrapper, , INTEGER_TYPES);

    template <typename X>
    void Loops::wrapperX(const int opNum) {
        X *x = nullptr;
        Nd4jLong *shape = nullptr;
        ReduceSameWrapper<X>::wrap(opNum, x, shape, reinterpret_cast<X*>(shape), shape, shape, shape, reinterpret_cast<int*>(shape), 0, reinterpret_cast<X*>(shape));
    }

    BUILD_SINGLE_TEMPLATE(template void Loops::wrapperX, (const int opNum), LIBND4J_TYPES);

    //template class ReduceSameWrapper<double>;
    //template class ReduceSameWrapper<float>;
    //template class ReduceSameWrapper<float16>;
    //template class ReduceSameWrapper<bfloat16>;

    //template void nd4j::Loops::loopTadXZ<bfloat16, bfloat16, bfloat16, simdOps::ASum<bfloat16> >(bfloat16 const*, Nd4jLong const*, bfloat16*, Nd4jLong const*, Nd4jLong const*, Nd4jLong const*, int const*, int, bfloat16*);
    //template void nd4j::Loops::loopTadXZ<bfloat16, bfloat16, bfloat16, simdOps::AMax<bfloat16> >(bfloat16 const*, Nd4jLong const*, bfloat16*, Nd4jLong const*, Nd4jLong const*, Nd4jLong const*, int const*, int, bfloat16*);
}
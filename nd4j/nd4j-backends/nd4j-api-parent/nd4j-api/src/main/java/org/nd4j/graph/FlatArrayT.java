/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatArrayT {
  private long[] shape;
  private byte[] buffer;
  private byte dtype;
  private byte byteOrder;

  public long[] getShape() { return shape; }

  public void setShape(long[] shape) { this.shape = shape; }

  public byte[] getBuffer() { return buffer; }

  public void setBuffer(byte[] buffer) { this.buffer = buffer; }

  public byte getDtype() { return dtype; }

  public void setDtype(byte dtype) { this.dtype = dtype; }

  public byte getByteOrder() { return byteOrder; }

  public void setByteOrder(byte byteOrder) { this.byteOrder = byteOrder; }


  public FlatArrayT() {
    this.shape = null;
    this.buffer = null;
    this.dtype = 0;
    this.byteOrder = 0;
  }
  public static FlatArrayT deserializeFromBinary(byte[] fbBuffer) {
    return FlatArray.getRootAsFlatArray(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatArray.finishFlatArrayBuffer(fbb, FlatArray.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


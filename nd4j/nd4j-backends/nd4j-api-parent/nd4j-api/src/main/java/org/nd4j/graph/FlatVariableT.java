/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatVariableT {
  private org.nd4j.graph.IntPairT id;
  private String name;
  private byte dtype;
  private long[] shape;
  private org.nd4j.graph.FlatArrayT ndarray;
  private int device;
  private byte variabletype;
  private String[] controlDeps;
  private String[] controlDepForOp;
  private String[] controlDepsForVar;

  public org.nd4j.graph.IntPairT getId() { return id; }

  public void setId(org.nd4j.graph.IntPairT id) { this.id = id; }

  public String getName() { return name; }

  public void setName(String name) { this.name = name; }

  public byte getDtype() { return dtype; }

  public void setDtype(byte dtype) { this.dtype = dtype; }

  public long[] getShape() { return shape; }

  public void setShape(long[] shape) { this.shape = shape; }

  public org.nd4j.graph.FlatArrayT getNdarray() { return ndarray; }

  public void setNdarray(org.nd4j.graph.FlatArrayT ndarray) { this.ndarray = ndarray; }

  public int getDevice() { return device; }

  public void setDevice(int device) { this.device = device; }

  public byte getVariabletype() { return variabletype; }

  public void setVariabletype(byte variabletype) { this.variabletype = variabletype; }

  public String[] getControlDeps() { return controlDeps; }

  public void setControlDeps(String[] controlDeps) { this.controlDeps = controlDeps; }

  public String[] getControlDepForOp() { return controlDepForOp; }

  public void setControlDepForOp(String[] controlDepForOp) { this.controlDepForOp = controlDepForOp; }

  public String[] getControlDepsForVar() { return controlDepsForVar; }

  public void setControlDepsForVar(String[] controlDepsForVar) { this.controlDepsForVar = controlDepsForVar; }


  public FlatVariableT() {
    this.id = null;
    this.name = null;
    this.dtype = 0;
    this.shape = null;
    this.ndarray = null;
    this.device = 0;
    this.variabletype = 0;
    this.controlDeps = null;
    this.controlDepForOp = null;
    this.controlDepsForVar = null;
  }
  public static FlatVariableT deserializeFromBinary(byte[] fbBuffer) {
    return FlatVariable.getRootAsFlatVariable(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatVariable.finishFlatVariableBuffer(fbb, FlatVariable.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


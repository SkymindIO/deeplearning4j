/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class UIVariable extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static UIVariable getRootAsUIVariable(ByteBuffer _bb) { return getRootAsUIVariable(_bb, new UIVariable()); }
  public static UIVariable getRootAsUIVariable(ByteBuffer _bb, UIVariable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UIVariable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public org.nd4j.graph.IntPair id() { return id(new org.nd4j.graph.IntPair()); }
  public org.nd4j.graph.IntPair id(org.nd4j.graph.IntPair obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte type() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateType(byte type) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, type); return true; } else { return false; } }
  public byte datatype() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateDatatype(byte datatype) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, datatype); return true; } else { return false; } }
  public long shape(int j) { int o = __offset(12); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int shapeLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public LongVector shapeVector() { return shapeVector(new LongVector()); }
  public LongVector shapeVector(LongVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer shapeAsByteBuffer() { return __vector_as_bytebuffer(12, 8); }
  public ByteBuffer shapeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 8); }
  public boolean mutateShape(int j, long shape) { int o = __offset(12); if (o != 0) { bb.putLong(__vector(o) + j * 8, shape); return true; } else { return false; } }
  public String controlDeps(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int controlDepsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector controlDepsVector() { return controlDepsVector(new StringVector()); }
  public StringVector controlDepsVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String outputOfOp() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer outputOfOpAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer outputOfOpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public String inputsForOp(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int inputsForOpLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector inputsForOpVector() { return inputsForOpVector(new StringVector()); }
  public StringVector inputsForOpVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String controlDepsForOp(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int controlDepsForOpLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector controlDepsForOpVector() { return controlDepsForOpVector(new StringVector()); }
  public StringVector controlDepsForOpVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String controlDepsForVar(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int controlDepsForVarLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector controlDepsForVarVector() { return controlDepsForVarVector(new StringVector()); }
  public StringVector controlDepsForVarVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String gradientVariable() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gradientVariableAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer gradientVariableInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  public String uiLabelExtra() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer uiLabelExtraAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer uiLabelExtraInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  public org.nd4j.graph.FlatArray constantValue() { return constantValue(new org.nd4j.graph.FlatArray()); }
  public org.nd4j.graph.FlatArray constantValue(org.nd4j.graph.FlatArray obj) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createUIVariable(FlatBufferBuilder builder,
      int idOffset,
      int nameOffset,
      byte type,
      byte datatype,
      int shapeOffset,
      int controlDepsOffset,
      int outputOfOpOffset,
      int inputsForOpOffset,
      int controlDepsForOpOffset,
      int controlDepsForVarOffset,
      int gradientVariableOffset,
      int uiLabelExtraOffset,
      int constantValueOffset) {
    builder.startTable(13);
    UIVariable.addConstantValue(builder, constantValueOffset);
    UIVariable.addUiLabelExtra(builder, uiLabelExtraOffset);
    UIVariable.addGradientVariable(builder, gradientVariableOffset);
    UIVariable.addControlDepsForVar(builder, controlDepsForVarOffset);
    UIVariable.addControlDepsForOp(builder, controlDepsForOpOffset);
    UIVariable.addInputsForOp(builder, inputsForOpOffset);
    UIVariable.addOutputOfOp(builder, outputOfOpOffset);
    UIVariable.addControlDeps(builder, controlDepsOffset);
    UIVariable.addShape(builder, shapeOffset);
    UIVariable.addName(builder, nameOffset);
    UIVariable.addId(builder, idOffset);
    UIVariable.addDatatype(builder, datatype);
    UIVariable.addType(builder, type);
    return UIVariable.endUIVariable(builder);
  }

  public static void startUIVariable(FlatBufferBuilder builder) { builder.startTable(13); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(2, type, 0); }
  public static void addDatatype(FlatBufferBuilder builder, byte datatype) { builder.addByte(3, datatype, 0); }
  public static void addShape(FlatBufferBuilder builder, int shapeOffset) { builder.addOffset(4, shapeOffset, 0); }
  public static int createShapeVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startShapeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addControlDeps(FlatBufferBuilder builder, int controlDepsOffset) { builder.addOffset(5, controlDepsOffset, 0); }
  public static int createControlDepsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControlDepsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOutputOfOp(FlatBufferBuilder builder, int outputOfOpOffset) { builder.addOffset(6, outputOfOpOffset, 0); }
  public static void addInputsForOp(FlatBufferBuilder builder, int inputsForOpOffset) { builder.addOffset(7, inputsForOpOffset, 0); }
  public static int createInputsForOpVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputsForOpVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addControlDepsForOp(FlatBufferBuilder builder, int controlDepsForOpOffset) { builder.addOffset(8, controlDepsForOpOffset, 0); }
  public static int createControlDepsForOpVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControlDepsForOpVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addControlDepsForVar(FlatBufferBuilder builder, int controlDepsForVarOffset) { builder.addOffset(9, controlDepsForVarOffset, 0); }
  public static int createControlDepsForVarVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControlDepsForVarVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGradientVariable(FlatBufferBuilder builder, int gradientVariableOffset) { builder.addOffset(10, gradientVariableOffset, 0); }
  public static void addUiLabelExtra(FlatBufferBuilder builder, int uiLabelExtraOffset) { builder.addOffset(11, uiLabelExtraOffset, 0); }
  public static void addConstantValue(FlatBufferBuilder builder, int constantValueOffset) { builder.addOffset(12, constantValueOffset, 0); }
  public static int endUIVariable(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UIVariable get(int j) { return get(new UIVariable(), j); }
    public UIVariable get(UIVariable obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public UIVariableT unpack() {
    UIVariableT _o = new UIVariableT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(UIVariableT _o) {
    if (id() != null) _o.setId(id().unpack());
    else _o.setId(null);
    String _oName = name();
    _o.setName(_oName);
    byte _oType = type();
    _o.setType(_oType);
    byte _oDatatype = datatype();
    _o.setDatatype(_oDatatype);
    long[] _oShape = new long[shapeLength()];
    for (int _j = 0; _j < shapeLength(); ++_j) {_oShape[_j] = shape(_j);}
    _o.setShape(_oShape);
    String[] _oControlDeps = new String[controlDepsLength()];
    for (int _j = 0; _j < controlDepsLength(); ++_j) {_oControlDeps[_j] = controlDeps(_j);}
    _o.setControlDeps(_oControlDeps);
    String _oOutputOfOp = outputOfOp();
    _o.setOutputOfOp(_oOutputOfOp);
    String[] _oInputsForOp = new String[inputsForOpLength()];
    for (int _j = 0; _j < inputsForOpLength(); ++_j) {_oInputsForOp[_j] = inputsForOp(_j);}
    _o.setInputsForOp(_oInputsForOp);
    String[] _oControlDepsForOp = new String[controlDepsForOpLength()];
    for (int _j = 0; _j < controlDepsForOpLength(); ++_j) {_oControlDepsForOp[_j] = controlDepsForOp(_j);}
    _o.setControlDepsForOp(_oControlDepsForOp);
    String[] _oControlDepsForVar = new String[controlDepsForVarLength()];
    for (int _j = 0; _j < controlDepsForVarLength(); ++_j) {_oControlDepsForVar[_j] = controlDepsForVar(_j);}
    _o.setControlDepsForVar(_oControlDepsForVar);
    String _oGradientVariable = gradientVariable();
    _o.setGradientVariable(_oGradientVariable);
    String _oUiLabelExtra = uiLabelExtra();
    _o.setUiLabelExtra(_oUiLabelExtra);
    if (constantValue() != null) _o.setConstantValue(constantValue().unpack());
    else _o.setConstantValue(null);
  }
  public static int pack(FlatBufferBuilder builder, UIVariableT _o) {
    if (_o == null) return 0;
    int _id = _o.getId() == null ? 0 : org.nd4j.graph.IntPair.pack(builder, _o.getId());
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _shape = 0;
    if (_o.getShape() != null) {
      _shape = createShapeVector(builder, _o.getShape());
    }
    int _controlDeps = 0;
    if (_o.getControlDeps() != null) {
      int[] __controlDeps = new int[_o.getControlDeps().length];
      int _j = 0;
      for (String _e : _o.getControlDeps()) { __controlDeps[_j] = builder.createString(_e); _j++;}
      _controlDeps = createControlDepsVector(builder, __controlDeps);
    }
    int _outputOfOp = _o.getOutputOfOp() == null ? 0 : builder.createString(_o.getOutputOfOp());
    int _inputsForOp = 0;
    if (_o.getInputsForOp() != null) {
      int[] __inputsForOp = new int[_o.getInputsForOp().length];
      int _j = 0;
      for (String _e : _o.getInputsForOp()) { __inputsForOp[_j] = builder.createString(_e); _j++;}
      _inputsForOp = createInputsForOpVector(builder, __inputsForOp);
    }
    int _controlDepsForOp = 0;
    if (_o.getControlDepsForOp() != null) {
      int[] __controlDepsForOp = new int[_o.getControlDepsForOp().length];
      int _j = 0;
      for (String _e : _o.getControlDepsForOp()) { __controlDepsForOp[_j] = builder.createString(_e); _j++;}
      _controlDepsForOp = createControlDepsForOpVector(builder, __controlDepsForOp);
    }
    int _controlDepsForVar = 0;
    if (_o.getControlDepsForVar() != null) {
      int[] __controlDepsForVar = new int[_o.getControlDepsForVar().length];
      int _j = 0;
      for (String _e : _o.getControlDepsForVar()) { __controlDepsForVar[_j] = builder.createString(_e); _j++;}
      _controlDepsForVar = createControlDepsForVarVector(builder, __controlDepsForVar);
    }
    int _gradientVariable = _o.getGradientVariable() == null ? 0 : builder.createString(_o.getGradientVariable());
    int _uiLabelExtra = _o.getUiLabelExtra() == null ? 0 : builder.createString(_o.getUiLabelExtra());
    int _constantValue = _o.getConstantValue() == null ? 0 : org.nd4j.graph.FlatArray.pack(builder, _o.getConstantValue());
    return createUIVariable(
      builder,
      _id,
      _name,
      _o.getType(),
      _o.getDatatype(),
      _shape,
      _controlDeps,
      _outputOfOp,
      _inputsForOp,
      _controlDepsForOp,
      _controlDepsForVar,
      _gradientVariable,
      _uiLabelExtra,
      _constantValue);
  }
}


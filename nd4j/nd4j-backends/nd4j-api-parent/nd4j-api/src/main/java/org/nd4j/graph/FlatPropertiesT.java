/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatPropertiesT {
  private String name;
  private int[] i;
  private long[] l;
  private double[] d;
  private org.nd4j.graph.FlatArrayT[] a;
  private boolean[] b;
  private String[] s;
  private int[] shape;

  public String getName() { return name; }

  public void setName(String name) { this.name = name; }

  public int[] getI() { return i; }

  public void setI(int[] i) { this.i = i; }

  public long[] getL() { return l; }

  public void setL(long[] l) { this.l = l; }

  public double[] getD() { return d; }

  public void setD(double[] d) { this.d = d; }

  public org.nd4j.graph.FlatArrayT[] getA() { return a; }

  public void setA(org.nd4j.graph.FlatArrayT[] a) { this.a = a; }

  public boolean[] getB() { return b; }

  public void setB(boolean[] b) { this.b = b; }

  public String[] getS() { return s; }

  public void setS(String[] s) { this.s = s; }

  public int[] getShape() { return shape; }

  public void setShape(int[] shape) { this.shape = shape; }


  public FlatPropertiesT() {
    this.name = null;
    this.i = null;
    this.l = null;
    this.d = null;
    this.a = null;
    this.b = null;
    this.s = null;
    this.shape = null;
  }
  public static FlatPropertiesT deserializeFromBinary(byte[] fbBuffer) {
    return FlatProperties.getRootAsFlatProperties(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatProperties.finishFlatPropertiesBuffer(fbb, FlatProperties.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


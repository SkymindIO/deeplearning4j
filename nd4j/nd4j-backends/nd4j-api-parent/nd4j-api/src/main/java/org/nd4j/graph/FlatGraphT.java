/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatGraphT {
  private long id;
  private org.nd4j.graph.FlatVariableT[] variables;
  private org.nd4j.graph.FlatNodeT[] nodes;
  private org.nd4j.graph.IntPairT[] outputs;
  private org.nd4j.graph.FlatConfigurationT configuration;
  private String[] placeholders;
  private String[] lossVariables;
  private String trainingConfig;
  private org.nd4j.graph.UpdaterStateT[] updaterState;

  public long getId() { return id; }

  public void setId(long id) { this.id = id; }

  public org.nd4j.graph.FlatVariableT[] getVariables() { return variables; }

  public void setVariables(org.nd4j.graph.FlatVariableT[] variables) { this.variables = variables; }

  public org.nd4j.graph.FlatNodeT[] getNodes() { return nodes; }

  public void setNodes(org.nd4j.graph.FlatNodeT[] nodes) { this.nodes = nodes; }

  public org.nd4j.graph.IntPairT[] getOutputs() { return outputs; }

  public void setOutputs(org.nd4j.graph.IntPairT[] outputs) { this.outputs = outputs; }

  public org.nd4j.graph.FlatConfigurationT getConfiguration() { return configuration; }

  public void setConfiguration(org.nd4j.graph.FlatConfigurationT configuration) { this.configuration = configuration; }

  public String[] getPlaceholders() { return placeholders; }

  public void setPlaceholders(String[] placeholders) { this.placeholders = placeholders; }

  public String[] getLossVariables() { return lossVariables; }

  public void setLossVariables(String[] lossVariables) { this.lossVariables = lossVariables; }

  public String getTrainingConfig() { return trainingConfig; }

  public void setTrainingConfig(String trainingConfig) { this.trainingConfig = trainingConfig; }

  public org.nd4j.graph.UpdaterStateT[] getUpdaterState() { return updaterState; }

  public void setUpdaterState(org.nd4j.graph.UpdaterStateT[] updaterState) { this.updaterState = updaterState; }


  public FlatGraphT() {
    this.id = 0L;
    this.variables = null;
    this.nodes = null;
    this.outputs = null;
    this.configuration = null;
    this.placeholders = null;
    this.lossVariables = null;
    this.trainingConfig = null;
    this.updaterState = null;
  }
  public static FlatGraphT deserializeFromBinary(byte[] fbBuffer) {
    return FlatGraph.getRootAsFlatGraph(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatGraph.finishFlatGraphBuffer(fbb, FlatGraph.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class UISummaryStatisticsT {
  private long bitmask;
  private org.nd4j.graph.FlatArrayT min;
  private org.nd4j.graph.FlatArrayT max;
  private double mean;
  private double stdev;
  private long countzero;
  private long countpositive;
  private long countnegative;
  private long countnan;
  private long countinf;

  public long getBitmask() { return bitmask; }

  public void setBitmask(long bitmask) { this.bitmask = bitmask; }

  public org.nd4j.graph.FlatArrayT getMin() { return min; }

  public void setMin(org.nd4j.graph.FlatArrayT min) { this.min = min; }

  public org.nd4j.graph.FlatArrayT getMax() { return max; }

  public void setMax(org.nd4j.graph.FlatArrayT max) { this.max = max; }

  public double getMean() { return mean; }

  public void setMean(double mean) { this.mean = mean; }

  public double getStdev() { return stdev; }

  public void setStdev(double stdev) { this.stdev = stdev; }

  public long getCountzero() { return countzero; }

  public void setCountzero(long countzero) { this.countzero = countzero; }

  public long getCountpositive() { return countpositive; }

  public void setCountpositive(long countpositive) { this.countpositive = countpositive; }

  public long getCountnegative() { return countnegative; }

  public void setCountnegative(long countnegative) { this.countnegative = countnegative; }

  public long getCountnan() { return countnan; }

  public void setCountnan(long countnan) { this.countnan = countnan; }

  public long getCountinf() { return countinf; }

  public void setCountinf(long countinf) { this.countinf = countinf; }


  public UISummaryStatisticsT() {
    this.bitmask = 0L;
    this.min = null;
    this.max = null;
    this.mean = 0.0;
    this.stdev = 0.0;
    this.countzero = 0L;
    this.countpositive = 0L;
    this.countnegative = 0L;
    this.countnan = 0L;
    this.countinf = 0L;
  }
}


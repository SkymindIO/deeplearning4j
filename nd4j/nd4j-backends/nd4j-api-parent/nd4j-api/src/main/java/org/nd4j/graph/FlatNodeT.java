/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatNodeT {
  private int id;
  private String name;
  private byte opType;
  private long opNum;
  private org.nd4j.graph.FlatPropertiesT[] properties;
  private int[] input;
  private org.nd4j.graph.IntPairT[] inputPaired;
  private int[] output;
  private double[] extraParams;
  private long[] extraInteger;
  private boolean[] extraBools;
  private int[] dimensions;
  private int device;
  private int scopeId;
  private String scopeName;
  private String[] outputNames;
  private String opName;
  private byte[] outputTypes;
  private org.nd4j.graph.FlatArrayT scalar;
  private String[] controlDeps;
  private String[] varControlDeps;
  private String[] controlDepFor;
  private byte[] extraTypes;
  private String[] extraStrings;

  public int getId() { return id; }

  public void setId(int id) { this.id = id; }

  public String getName() { return name; }

  public void setName(String name) { this.name = name; }

  public byte getOpType() { return opType; }

  public void setOpType(byte opType) { this.opType = opType; }

  public long getOpNum() { return opNum; }

  public void setOpNum(long opNum) { this.opNum = opNum; }

  public org.nd4j.graph.FlatPropertiesT[] getProperties() { return properties; }

  public void setProperties(org.nd4j.graph.FlatPropertiesT[] properties) { this.properties = properties; }

  public int[] getInput() { return input; }

  public void setInput(int[] input) { this.input = input; }

  public org.nd4j.graph.IntPairT[] getInputPaired() { return inputPaired; }

  public void setInputPaired(org.nd4j.graph.IntPairT[] inputPaired) { this.inputPaired = inputPaired; }

  public int[] getOutput() { return output; }

  public void setOutput(int[] output) { this.output = output; }

  public double[] getExtraParams() { return extraParams; }

  public void setExtraParams(double[] extraParams) { this.extraParams = extraParams; }

  public long[] getExtraInteger() { return extraInteger; }

  public void setExtraInteger(long[] extraInteger) { this.extraInteger = extraInteger; }

  public boolean[] getExtraBools() { return extraBools; }

  public void setExtraBools(boolean[] extraBools) { this.extraBools = extraBools; }

  public int[] getDimensions() { return dimensions; }

  public void setDimensions(int[] dimensions) { this.dimensions = dimensions; }

  public int getDevice() { return device; }

  public void setDevice(int device) { this.device = device; }

  public int getScopeId() { return scopeId; }

  public void setScopeId(int scopeId) { this.scopeId = scopeId; }

  public String getScopeName() { return scopeName; }

  public void setScopeName(String scopeName) { this.scopeName = scopeName; }

  public String[] getOutputNames() { return outputNames; }

  public void setOutputNames(String[] outputNames) { this.outputNames = outputNames; }

  public String getOpName() { return opName; }

  public void setOpName(String opName) { this.opName = opName; }

  public byte[] getOutputTypes() { return outputTypes; }

  public void setOutputTypes(byte[] outputTypes) { this.outputTypes = outputTypes; }

  public org.nd4j.graph.FlatArrayT getScalar() { return scalar; }

  public void setScalar(org.nd4j.graph.FlatArrayT scalar) { this.scalar = scalar; }

  public String[] getControlDeps() { return controlDeps; }

  public void setControlDeps(String[] controlDeps) { this.controlDeps = controlDeps; }

  public String[] getVarControlDeps() { return varControlDeps; }

  public void setVarControlDeps(String[] varControlDeps) { this.varControlDeps = varControlDeps; }

  public String[] getControlDepFor() { return controlDepFor; }

  public void setControlDepFor(String[] controlDepFor) { this.controlDepFor = controlDepFor; }

  public byte[] getExtraTypes() { return extraTypes; }

  public void setExtraTypes(byte[] extraTypes) { this.extraTypes = extraTypes; }

  public String[] getExtraStrings() { return extraStrings; }

  public void setExtraStrings(String[] extraStrings) { this.extraStrings = extraStrings; }


  public FlatNodeT() {
    this.id = 0;
    this.name = null;
    this.opType = 0;
    this.opNum = 0L;
    this.properties = null;
    this.input = null;
    this.inputPaired = null;
    this.output = null;
    this.extraParams = null;
    this.extraInteger = null;
    this.extraBools = null;
    this.dimensions = null;
    this.device = 0;
    this.scopeId = 0;
    this.scopeName = null;
    this.outputNames = null;
    this.opName = null;
    this.outputTypes = null;
    this.scalar = null;
    this.controlDeps = null;
    this.varControlDeps = null;
    this.controlDepFor = null;
    this.extraTypes = null;
    this.extraStrings = null;
  }
  public static FlatNodeT deserializeFromBinary(byte[] fbBuffer) {
    return FlatNode.getRootAsFlatNode(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatNode.finishFlatNodeBuffer(fbb, FlatNode.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


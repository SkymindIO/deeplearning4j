/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FlatNode extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb) { return getRootAsFlatNode(_bb, new FlatNode()); }
  public static FlatNode getRootAsFlatNode(ByteBuffer _bb, FlatNode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlatNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateId(int id) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, id); return true; } else { return false; } }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public byte opType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateOpType(byte opType) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, opType); return true; } else { return false; } }
  public long opNum() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateOpNum(long opNum) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, opNum); return true; } else { return false; } }
  public org.nd4j.graph.FlatProperties properties(int j) { return properties(new org.nd4j.graph.FlatProperties(), j); }
  public org.nd4j.graph.FlatProperties properties(org.nd4j.graph.FlatProperties obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public org.nd4j.graph.FlatProperties.Vector propertiesVector() { return propertiesVector(new org.nd4j.graph.FlatProperties.Vector()); }
  public org.nd4j.graph.FlatProperties.Vector propertiesVector(org.nd4j.graph.FlatProperties.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int input(int j) { int o = __offset(14); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int inputLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public IntVector inputVector() { return inputVector(new IntVector()); }
  public IntVector inputVector(IntVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer inputAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer inputInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }
  public boolean mutateInput(int j, int input) { int o = __offset(14); if (o != 0) { bb.putInt(__vector(o) + j * 4, input); return true; } else { return false; } }
  public org.nd4j.graph.IntPair inputPaired(int j) { return inputPaired(new org.nd4j.graph.IntPair(), j); }
  public org.nd4j.graph.IntPair inputPaired(org.nd4j.graph.IntPair obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int inputPairedLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public org.nd4j.graph.IntPair.Vector inputPairedVector() { return inputPairedVector(new org.nd4j.graph.IntPair.Vector()); }
  public org.nd4j.graph.IntPair.Vector inputPairedVector(org.nd4j.graph.IntPair.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int output(int j) { int o = __offset(18); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int outputLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public IntVector outputVector() { return outputVector(new IntVector()); }
  public IntVector outputVector(IntVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer outputAsByteBuffer() { return __vector_as_bytebuffer(18, 4); }
  public ByteBuffer outputInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 4); }
  public boolean mutateOutput(int j, int output) { int o = __offset(18); if (o != 0) { bb.putInt(__vector(o) + j * 4, output); return true; } else { return false; } }
  public double extraParams(int j) { int o = __offset(20); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int extraParamsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public DoubleVector extraParamsVector() { return extraParamsVector(new DoubleVector()); }
  public DoubleVector extraParamsVector(DoubleVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer extraParamsAsByteBuffer() { return __vector_as_bytebuffer(20, 8); }
  public ByteBuffer extraParamsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 8); }
  public boolean mutateExtraParams(int j, double extraParams) { int o = __offset(20); if (o != 0) { bb.putDouble(__vector(o) + j * 8, extraParams); return true; } else { return false; } }
  public long extraInteger(int j) { int o = __offset(22); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int extraIntegerLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public LongVector extraIntegerVector() { return extraIntegerVector(new LongVector()); }
  public LongVector extraIntegerVector(LongVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer extraIntegerAsByteBuffer() { return __vector_as_bytebuffer(22, 8); }
  public ByteBuffer extraIntegerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 8); }
  public boolean mutateExtraInteger(int j, long extraInteger) { int o = __offset(22); if (o != 0) { bb.putLong(__vector(o) + j * 8, extraInteger); return true; } else { return false; } }
  public boolean extraBools(int j) { int o = __offset(24); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int extraBoolsLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public BooleanVector extraBoolsVector() { return extraBoolsVector(new BooleanVector()); }
  public BooleanVector extraBoolsVector(BooleanVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer extraBoolsAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer extraBoolsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  public boolean mutateExtraBools(int j, boolean extraBools) { int o = __offset(24); if (o != 0) { bb.put(__vector(o) + j * 1, (byte)(extraBools ? 1 : 0)); return true; } else { return false; } }
  public int dimensions(int j) { int o = __offset(26); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int dimensionsLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public IntVector dimensionsVector() { return dimensionsVector(new IntVector()); }
  public IntVector dimensionsVector(IntVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer dimensionsAsByteBuffer() { return __vector_as_bytebuffer(26, 4); }
  public ByteBuffer dimensionsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 4); }
  public boolean mutateDimensions(int j, int dimensions) { int o = __offset(26); if (o != 0) { bb.putInt(__vector(o) + j * 4, dimensions); return true; } else { return false; } }
  public int device() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateDevice(int device) { int o = __offset(28); if (o != 0) { bb.putInt(o + bb_pos, device); return true; } else { return false; } }
  public int scopeId() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateScopeId(int scope_id) { int o = __offset(30); if (o != 0) { bb.putInt(o + bb_pos, scope_id); return true; } else { return false; } }
  public String scopeName() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scopeNameAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer scopeNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  public String outputNames(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int outputNamesLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector outputNamesVector() { return outputNamesVector(new StringVector()); }
  public StringVector outputNamesVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String opName() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opNameAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer opNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  public byte outputTypes(int j) { int o = __offset(38); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int outputTypesLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector outputTypesVector() { return outputTypesVector(new ByteVector()); }
  public ByteVector outputTypesVector(ByteVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer outputTypesAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer outputTypesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  public boolean mutateOutputTypes(int j, byte outputTypes) { int o = __offset(38); if (o != 0) { bb.put(__vector(o) + j * 1, outputTypes); return true; } else { return false; } }
  public org.nd4j.graph.FlatArray scalar() { return scalar(new org.nd4j.graph.FlatArray()); }
  public org.nd4j.graph.FlatArray scalar(org.nd4j.graph.FlatArray obj) { int o = __offset(40); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String controlDeps(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int controlDepsLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector controlDepsVector() { return controlDepsVector(new StringVector()); }
  public StringVector controlDepsVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String varControlDeps(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int varControlDepsLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector varControlDepsVector() { return varControlDepsVector(new StringVector()); }
  public StringVector varControlDepsVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String controlDepFor(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int controlDepForLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector controlDepForVector() { return controlDepForVector(new StringVector()); }
  public StringVector controlDepForVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public byte extraTypes(int j) { int o = __offset(48); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int extraTypesLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector extraTypesVector() { return extraTypesVector(new ByteVector()); }
  public ByteVector extraTypesVector(ByteVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer extraTypesAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer extraTypesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  public boolean mutateExtraTypes(int j, byte extraTypes) { int o = __offset(48); if (o != 0) { bb.put(__vector(o) + j * 1, extraTypes); return true; } else { return false; } }
  public String extraStrings(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int extraStringsLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector extraStringsVector() { return extraStringsVector(new StringVector()); }
  public StringVector extraStringsVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFlatNode(FlatBufferBuilder builder,
      int id,
      int nameOffset,
      byte opType,
      long opNum,
      int propertiesOffset,
      int inputOffset,
      int inputPairedOffset,
      int outputOffset,
      int extraParamsOffset,
      int extraIntegerOffset,
      int extraBoolsOffset,
      int dimensionsOffset,
      int device,
      int scopeId,
      int scopeNameOffset,
      int outputNamesOffset,
      int opNameOffset,
      int outputTypesOffset,
      int scalarOffset,
      int controlDepsOffset,
      int varControlDepsOffset,
      int controlDepForOffset,
      int extraTypesOffset,
      int extraStringsOffset) {
    builder.startTable(24);
    FlatNode.addOpNum(builder, opNum);
    FlatNode.addExtraStrings(builder, extraStringsOffset);
    FlatNode.addExtraTypes(builder, extraTypesOffset);
    FlatNode.addControlDepFor(builder, controlDepForOffset);
    FlatNode.addVarControlDeps(builder, varControlDepsOffset);
    FlatNode.addControlDeps(builder, controlDepsOffset);
    FlatNode.addScalar(builder, scalarOffset);
    FlatNode.addOutputTypes(builder, outputTypesOffset);
    FlatNode.addOpName(builder, opNameOffset);
    FlatNode.addOutputNames(builder, outputNamesOffset);
    FlatNode.addScopeName(builder, scopeNameOffset);
    FlatNode.addScopeId(builder, scopeId);
    FlatNode.addDevice(builder, device);
    FlatNode.addDimensions(builder, dimensionsOffset);
    FlatNode.addExtraBools(builder, extraBoolsOffset);
    FlatNode.addExtraInteger(builder, extraIntegerOffset);
    FlatNode.addExtraParams(builder, extraParamsOffset);
    FlatNode.addOutput(builder, outputOffset);
    FlatNode.addInputPaired(builder, inputPairedOffset);
    FlatNode.addInput(builder, inputOffset);
    FlatNode.addProperties(builder, propertiesOffset);
    FlatNode.addName(builder, nameOffset);
    FlatNode.addId(builder, id);
    FlatNode.addOpType(builder, opType);
    return FlatNode.endFlatNode(builder);
  }

  public static void startFlatNode(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addOpType(FlatBufferBuilder builder, byte opType) { builder.addByte(2, opType, 0); }
  public static void addOpNum(FlatBufferBuilder builder, long opNum) { builder.addLong(3, opNum, 0L); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(4, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInput(FlatBufferBuilder builder, int inputOffset) { builder.addOffset(5, inputOffset, 0); }
  public static int createInputVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startInputVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInputPaired(FlatBufferBuilder builder, int inputPairedOffset) { builder.addOffset(6, inputPairedOffset, 0); }
  public static int createInputPairedVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputPairedVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOutput(FlatBufferBuilder builder, int outputOffset) { builder.addOffset(7, outputOffset, 0); }
  public static int createOutputVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startOutputVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExtraParams(FlatBufferBuilder builder, int extraParamsOffset) { builder.addOffset(8, extraParamsOffset, 0); }
  public static int createExtraParamsVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startExtraParamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addExtraInteger(FlatBufferBuilder builder, int extraIntegerOffset) { builder.addOffset(9, extraIntegerOffset, 0); }
  public static int createExtraIntegerVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startExtraIntegerVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addExtraBools(FlatBufferBuilder builder, int extraBoolsOffset) { builder.addOffset(10, extraBoolsOffset, 0); }
  public static int createExtraBoolsVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startExtraBoolsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addDimensions(FlatBufferBuilder builder, int dimensionsOffset) { builder.addOffset(11, dimensionsOffset, 0); }
  public static int createDimensionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDimensionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDevice(FlatBufferBuilder builder, int device) { builder.addInt(12, device, 0); }
  public static void addScopeId(FlatBufferBuilder builder, int scopeId) { builder.addInt(13, scopeId, 0); }
  public static void addScopeName(FlatBufferBuilder builder, int scopeNameOffset) { builder.addOffset(14, scopeNameOffset, 0); }
  public static void addOutputNames(FlatBufferBuilder builder, int outputNamesOffset) { builder.addOffset(15, outputNamesOffset, 0); }
  public static int createOutputNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutputNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOpName(FlatBufferBuilder builder, int opNameOffset) { builder.addOffset(16, opNameOffset, 0); }
  public static void addOutputTypes(FlatBufferBuilder builder, int outputTypesOffset) { builder.addOffset(17, outputTypesOffset, 0); }
  public static int createOutputTypesVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createOutputTypesVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startOutputTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addScalar(FlatBufferBuilder builder, int scalarOffset) { builder.addOffset(18, scalarOffset, 0); }
  public static void addControlDeps(FlatBufferBuilder builder, int controlDepsOffset) { builder.addOffset(19, controlDepsOffset, 0); }
  public static int createControlDepsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControlDepsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVarControlDeps(FlatBufferBuilder builder, int varControlDepsOffset) { builder.addOffset(20, varControlDepsOffset, 0); }
  public static int createVarControlDepsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVarControlDepsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addControlDepFor(FlatBufferBuilder builder, int controlDepForOffset) { builder.addOffset(21, controlDepForOffset, 0); }
  public static int createControlDepForVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startControlDepForVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExtraTypes(FlatBufferBuilder builder, int extraTypesOffset) { builder.addOffset(22, extraTypesOffset, 0); }
  public static int createExtraTypesVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createExtraTypesVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startExtraTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addExtraStrings(FlatBufferBuilder builder, int extraStringsOffset) { builder.addOffset(23, extraStringsOffset, 0); }
  public static int createExtraStringsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startExtraStringsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFlatNode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlatNodeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFlatNodeBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlatNode get(int j) { return get(new FlatNode(), j); }
    public FlatNode get(FlatNode obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FlatNodeT unpack() {
    FlatNodeT _o = new FlatNodeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FlatNodeT _o) {
    int _oId = id();
    _o.setId(_oId);
    String _oName = name();
    _o.setName(_oName);
    byte _oOpType = opType();
    _o.setOpType(_oOpType);
    long _oOpNum = opNum();
    _o.setOpNum(_oOpNum);
    org.nd4j.graph.FlatPropertiesT[] _oProperties = new org.nd4j.graph.FlatPropertiesT[propertiesLength()];
    for (int _j = 0; _j < propertiesLength(); ++_j) {_oProperties[_j] = (properties(_j) != null ? properties(_j).unpack() : null);}
    _o.setProperties(_oProperties);
    int[] _oInput = new int[inputLength()];
    for (int _j = 0; _j < inputLength(); ++_j) {_oInput[_j] = input(_j);}
    _o.setInput(_oInput);
    org.nd4j.graph.IntPairT[] _oInputPaired = new org.nd4j.graph.IntPairT[inputPairedLength()];
    for (int _j = 0; _j < inputPairedLength(); ++_j) {_oInputPaired[_j] = (inputPaired(_j) != null ? inputPaired(_j).unpack() : null);}
    _o.setInputPaired(_oInputPaired);
    int[] _oOutput = new int[outputLength()];
    for (int _j = 0; _j < outputLength(); ++_j) {_oOutput[_j] = output(_j);}
    _o.setOutput(_oOutput);
    double[] _oExtraParams = new double[extraParamsLength()];
    for (int _j = 0; _j < extraParamsLength(); ++_j) {_oExtraParams[_j] = extraParams(_j);}
    _o.setExtraParams(_oExtraParams);
    long[] _oExtraInteger = new long[extraIntegerLength()];
    for (int _j = 0; _j < extraIntegerLength(); ++_j) {_oExtraInteger[_j] = extraInteger(_j);}
    _o.setExtraInteger(_oExtraInteger);
    boolean[] _oExtraBools = new boolean[extraBoolsLength()];
    for (int _j = 0; _j < extraBoolsLength(); ++_j) {_oExtraBools[_j] = extraBools(_j);}
    _o.setExtraBools(_oExtraBools);
    int[] _oDimensions = new int[dimensionsLength()];
    for (int _j = 0; _j < dimensionsLength(); ++_j) {_oDimensions[_j] = dimensions(_j);}
    _o.setDimensions(_oDimensions);
    int _oDevice = device();
    _o.setDevice(_oDevice);
    int _oScopeId = scopeId();
    _o.setScopeId(_oScopeId);
    String _oScopeName = scopeName();
    _o.setScopeName(_oScopeName);
    String[] _oOutputNames = new String[outputNamesLength()];
    for (int _j = 0; _j < outputNamesLength(); ++_j) {_oOutputNames[_j] = outputNames(_j);}
    _o.setOutputNames(_oOutputNames);
    String _oOpName = opName();
    _o.setOpName(_oOpName);
    byte[] _oOutputTypes = new byte[outputTypesLength()];
    for (int _j = 0; _j < outputTypesLength(); ++_j) {_oOutputTypes[_j] = outputTypes(_j);}
    _o.setOutputTypes(_oOutputTypes);
    if (scalar() != null) _o.setScalar(scalar().unpack());
    else _o.setScalar(null);
    String[] _oControlDeps = new String[controlDepsLength()];
    for (int _j = 0; _j < controlDepsLength(); ++_j) {_oControlDeps[_j] = controlDeps(_j);}
    _o.setControlDeps(_oControlDeps);
    String[] _oVarControlDeps = new String[varControlDepsLength()];
    for (int _j = 0; _j < varControlDepsLength(); ++_j) {_oVarControlDeps[_j] = varControlDeps(_j);}
    _o.setVarControlDeps(_oVarControlDeps);
    String[] _oControlDepFor = new String[controlDepForLength()];
    for (int _j = 0; _j < controlDepForLength(); ++_j) {_oControlDepFor[_j] = controlDepFor(_j);}
    _o.setControlDepFor(_oControlDepFor);
    byte[] _oExtraTypes = new byte[extraTypesLength()];
    for (int _j = 0; _j < extraTypesLength(); ++_j) {_oExtraTypes[_j] = extraTypes(_j);}
    _o.setExtraTypes(_oExtraTypes);
    String[] _oExtraStrings = new String[extraStringsLength()];
    for (int _j = 0; _j < extraStringsLength(); ++_j) {_oExtraStrings[_j] = extraStrings(_j);}
    _o.setExtraStrings(_oExtraStrings);
  }
  public static int pack(FlatBufferBuilder builder, FlatNodeT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _properties = 0;
    if (_o.getProperties() != null) {
      int[] __properties = new int[_o.getProperties().length];
      int _j = 0;
      for (org.nd4j.graph.FlatPropertiesT _e : _o.getProperties()) { __properties[_j] = org.nd4j.graph.FlatProperties.pack(builder, _e); _j++;}
      _properties = createPropertiesVector(builder, __properties);
    }
    int _input = 0;
    if (_o.getInput() != null) {
      _input = createInputVector(builder, _o.getInput());
    }
    int _inputPaired = 0;
    if (_o.getInputPaired() != null) {
      int[] __inputPaired = new int[_o.getInputPaired().length];
      int _j = 0;
      for (org.nd4j.graph.IntPairT _e : _o.getInputPaired()) { __inputPaired[_j] = org.nd4j.graph.IntPair.pack(builder, _e); _j++;}
      _inputPaired = createInputPairedVector(builder, __inputPaired);
    }
    int _output = 0;
    if (_o.getOutput() != null) {
      _output = createOutputVector(builder, _o.getOutput());
    }
    int _extraParams = 0;
    if (_o.getExtraParams() != null) {
      _extraParams = createExtraParamsVector(builder, _o.getExtraParams());
    }
    int _extraInteger = 0;
    if (_o.getExtraInteger() != null) {
      _extraInteger = createExtraIntegerVector(builder, _o.getExtraInteger());
    }
    int _extraBools = 0;
    if (_o.getExtraBools() != null) {
      _extraBools = createExtraBoolsVector(builder, _o.getExtraBools());
    }
    int _dimensions = 0;
    if (_o.getDimensions() != null) {
      _dimensions = createDimensionsVector(builder, _o.getDimensions());
    }
    int _scopeName = _o.getScopeName() == null ? 0 : builder.createString(_o.getScopeName());
    int _outputNames = 0;
    if (_o.getOutputNames() != null) {
      int[] __outputNames = new int[_o.getOutputNames().length];
      int _j = 0;
      for (String _e : _o.getOutputNames()) { __outputNames[_j] = builder.createString(_e); _j++;}
      _outputNames = createOutputNamesVector(builder, __outputNames);
    }
    int _opName = _o.getOpName() == null ? 0 : builder.createString(_o.getOpName());
    int _outputTypes = 0;
    if (_o.getOutputTypes() != null) {
      _outputTypes = createOutputTypesVector(builder, _o.getOutputTypes());
    }
    int _scalar = _o.getScalar() == null ? 0 : org.nd4j.graph.FlatArray.pack(builder, _o.getScalar());
    int _controlDeps = 0;
    if (_o.getControlDeps() != null) {
      int[] __controlDeps = new int[_o.getControlDeps().length];
      int _j = 0;
      for (String _e : _o.getControlDeps()) { __controlDeps[_j] = builder.createString(_e); _j++;}
      _controlDeps = createControlDepsVector(builder, __controlDeps);
    }
    int _varControlDeps = 0;
    if (_o.getVarControlDeps() != null) {
      int[] __varControlDeps = new int[_o.getVarControlDeps().length];
      int _j = 0;
      for (String _e : _o.getVarControlDeps()) { __varControlDeps[_j] = builder.createString(_e); _j++;}
      _varControlDeps = createVarControlDepsVector(builder, __varControlDeps);
    }
    int _controlDepFor = 0;
    if (_o.getControlDepFor() != null) {
      int[] __controlDepFor = new int[_o.getControlDepFor().length];
      int _j = 0;
      for (String _e : _o.getControlDepFor()) { __controlDepFor[_j] = builder.createString(_e); _j++;}
      _controlDepFor = createControlDepForVector(builder, __controlDepFor);
    }
    int _extraTypes = 0;
    if (_o.getExtraTypes() != null) {
      _extraTypes = createExtraTypesVector(builder, _o.getExtraTypes());
    }
    int _extraStrings = 0;
    if (_o.getExtraStrings() != null) {
      int[] __extraStrings = new int[_o.getExtraStrings().length];
      int _j = 0;
      for (String _e : _o.getExtraStrings()) { __extraStrings[_j] = builder.createString(_e); _j++;}
      _extraStrings = createExtraStringsVector(builder, __extraStrings);
    }
    return createFlatNode(
      builder,
      _o.getId(),
      _name,
      _o.getOpType(),
      _o.getOpNum(),
      _properties,
      _input,
      _inputPaired,
      _output,
      _extraParams,
      _extraInteger,
      _extraBools,
      _dimensions,
      _o.getDevice(),
      _o.getScopeId(),
      _scopeName,
      _outputNames,
      _opName,
      _outputTypes,
      _scalar,
      _controlDeps,
      _varControlDeps,
      _controlDepFor,
      _extraTypes,
      _extraStrings);
  }
}


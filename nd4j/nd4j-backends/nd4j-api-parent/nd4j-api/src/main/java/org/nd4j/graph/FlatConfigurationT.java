/*
 * ******************************************************************************
 *
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 *  See the NOTICE file distributed with this work for additional
 *  information regarding copyright ownership.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ******************************************************************************/


// automatically generated by the FlatBuffers compiler, do not modify

package org.nd4j.graph;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class FlatConfigurationT {
  private long id;
  private byte executionMode;
  private byte profilingMode;
  private byte outputMode;
  private boolean timestats;
  private long footprintForward;
  private long footprintBackward;
  private byte direction;

  public long getId() { return id; }

  public void setId(long id) { this.id = id; }

  public byte getExecutionMode() { return executionMode; }

  public void setExecutionMode(byte executionMode) { this.executionMode = executionMode; }

  public byte getProfilingMode() { return profilingMode; }

  public void setProfilingMode(byte profilingMode) { this.profilingMode = profilingMode; }

  public byte getOutputMode() { return outputMode; }

  public void setOutputMode(byte outputMode) { this.outputMode = outputMode; }

  public boolean getTimestats() { return timestats; }

  public void setTimestats(boolean timestats) { this.timestats = timestats; }

  public long getFootprintForward() { return footprintForward; }

  public void setFootprintForward(long footprintForward) { this.footprintForward = footprintForward; }

  public long getFootprintBackward() { return footprintBackward; }

  public void setFootprintBackward(long footprintBackward) { this.footprintBackward = footprintBackward; }

  public byte getDirection() { return direction; }

  public void setDirection(byte direction) { this.direction = direction; }


  public FlatConfigurationT() {
    this.id = 0L;
    this.executionMode = 0;
    this.profilingMode = 0;
    this.outputMode = 0;
    this.timestats = false;
    this.footprintForward = 0L;
    this.footprintBackward = 0L;
    this.direction = 0;
  }
  public static FlatConfigurationT deserializeFromBinary(byte[] fbBuffer) {
    return FlatConfiguration.getRootAsFlatConfiguration(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    FlatConfiguration.finishFlatConfigurationBuffer(fbb, FlatConfiguration.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}


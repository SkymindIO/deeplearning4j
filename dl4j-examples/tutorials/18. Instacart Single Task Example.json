{"paragraphs":[{"text":"%md\n### Note\n\nPlease view the [README](https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md) to learn about installing, setting up dependencies, and importing notebooks in Zeppelin","user":"admin","dateUpdated":"2018-04-27T08:41:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Note</h3>\n<p>Please view the <a href=\"https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md\">README</a> to learn about installing, setting up dependencies, and importing notebooks in Zeppelin</p>\n"}]},"apps":[],"jobName":"paragraph_1524818351336_1698955097","id":"20180427-083911_1128930448","dateCreated":"2018-04-27T08:39:11+0000","dateStarted":"2018-04-27T08:41:32+0000","dateFinished":"2018-04-27T08:41:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4843"},{"text":"%md\n\n### Background\n\nThis tutorial will be similar to the Instacart Multitask tutorial. The only difference is that we will not use multitasking to train our neural network. Recall the data originially comes from a Kaggle challenge (kaggle.com/c/instacart-market-basket-analysis). We removed users that only made 1 order using the instacart app and then took 5000 users out of the remaining to be part of the data for this tutorial. \n\nFor each order, we have information on the product the user purchased. For example, there is information on the product name, what aisle it is found in, and the department it falls under. To construct features, we extracted indicators representing whether or not a user purchased a product in the given aisles for each order. In total there are 134 aisles. The targets were whether or not a user will buy a product in the breakfast department in the next order. As mentioned, we will not use any auxiliary targets.\n\nBecause of temporal dependencies within the data, we used a LSTM network for our model.","user":"admin","dateUpdated":"2018-04-27T09:35:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Background</h3>\n<p>This tutorial will be similar to the Instacart Multitask tutorial. The only difference is that we will not use multitasking to train our neural network. Recall the data originially comes from a Kaggle challenge (kaggle.com/c/instacart-market-basket-analysis). We removed users that only made 1 order using the instacart app and then took 5000 users out of the remaining to be part of the data for this tutorial.</p>\n<p>For each order, we have information on the product the user purchased. For example, there is information on the product name, what aisle it is found in, and the department it falls under. To construct features, we extracted indicators representing whether or not a user purchased a product in the given aisles for each order. In total there are 134 aisles. The targets were whether or not a user will buy a product in the breakfast department in the next order. As mentioned, we will not use any auxiliary targets.</p>\n<p>Because of temporal dependencies within the data, we used a LSTM network for our model.</p>\n"}]},"apps":[],"jobName":"paragraph_1524819423424_954210398","id":"20180427-085703_34966348","dateCreated":"2018-04-27T08:57:03+0000","dateStarted":"2018-04-27T09:35:50+0000","dateFinished":"2018-04-27T09:35:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4844"},{"text":"%md\n### Imports\n","user":"admin","dateUpdated":"2018-04-27T08:56:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Imports</h3>\n"}]},"apps":[],"jobName":"paragraph_1524819408700_-1859873706","id":"20180427-085648_929291696","dateCreated":"2018-04-27T08:56:48+0000","dateStarted":"2018-04-27T08:56:53+0000","dateFinished":"2018-04-27T08:56:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4845"},{"text":"import org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.Updater;\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.nd4j.linalg.activations.Activation;\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer;\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction;\nimport org.deeplearning4j.nn.conf.GradientNormalization;\nimport org.deeplearning4j.eval.ROC;\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader;\nimport org.datavec.api.records.reader.SequenceRecordReader;\nimport org.datavec.api.split.NumberedFileInputSplit;\nimport org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator;\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport java.io.File;\nimport java.net.URL;\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry;","user":"admin","dateUpdated":"2018-04-27T09:54:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.Updater\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.deeplearning4j.nn.conf.GradientNormalization\nimport org.deeplearning4j.eval.ROC\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader\nimport org.datavec.api.records.reader.SequenceRecordReader\nimport org.datavec.api.split.NumberedFileInputSplit\nimport org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport java.io.File\nimport java.net.URL\nimport java.io.BufferedInputStream\nimport java.io.FileInputStream\nimport java.io.BufferedOutputStream\nimport java.io.FileOutputStream\nimport org.apache.commons.io.FilenameUtils\nimport org.apache.commons.io.FileUtils\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry\n"}]},"apps":[],"jobName":"paragraph_1524818370471_406214117","id":"20180427-083930_917505582","dateCreated":"2018-04-27T08:39:30+0000","dateStarted":"2018-04-27T09:54:56+0000","dateFinished":"2018-04-27T09:55:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4846"},{"text":"%md \n\n### Download Data","user":"admin","dateUpdated":"2018-04-27T08:42:34+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Download Data</h3>\n"}]},"apps":[],"jobName":"paragraph_1524818373560_371602040","id":"20180427-083933_1234393367","dateCreated":"2018-04-27T08:39:33+0000","dateStarted":"2018-04-27T08:42:34+0000","dateFinished":"2018-04-27T08:42:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4847"},{"text":"%md\nTo download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.","user":"admin","dateUpdated":"2018-04-27T08:43:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.</p>\n"}]},"apps":[],"jobName":"paragraph_1524818545886_-591780202","id":"20180427-084225_1613961353","dateCreated":"2018-04-27T08:42:25+0000","dateStarted":"2018-04-27T08:43:00+0000","dateFinished":"2018-04-27T08:43:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4848"},{"text":"val DATA_URL = \"https://bpstore1.blob.core.windows.net/tutorials/instacart.tar.gz\"\nval DATA_PATH = FilenameUtils.concat(System.getProperty(\"java.io.tmpdir\"), \"dl4j_instacart/\")","user":"admin","dateUpdated":"2018-04-27T09:55:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DATA_URL: String = https://bpstore1.blob.core.windows.net/tutorials/instacart.tar.gz\nDATA_PATH: String = /tmp/dl4j_instacart/\n"}]},"apps":[],"jobName":"paragraph_1524818567808_-2026093453","id":"20180427-084247_2085419306","dateCreated":"2018-04-27T08:42:47+0000","dateStarted":"2018-04-27T09:55:11+0000","dateFinished":"2018-04-27T09:55:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4849"},{"text":"val directory = new File(DATA_PATH)\ndirectory.mkdir() \n\nval archizePath = DATA_PATH + \"instacart.tar.gz\"\nval archiveFile = new File(archizePath)\nval extractedPath = DATA_PATH + \"instacart\" \nval extractedFile = new File(extractedPath)\n\nFileUtils.copyURLToFile(new URL(DATA_URL), archiveFile) ","user":"admin","dateUpdated":"2018-04-27T09:55:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"directory: java.io.File = /tmp/dl4j_instacart\nres0: Boolean = false\narchizePath: String = /tmp/dl4j_instacart/instacart.tar.gz\narchiveFile: java.io.File = /tmp/dl4j_instacart/instacart.tar.gz\nextractedPath: String = /tmp/dl4j_instacart/instacart\nextractedFile: java.io.File = /tmp/dl4j_instacart/instacart\n"}]},"apps":[],"jobName":"paragraph_1524818593239_175301835","id":"20180427-084313_1474080225","dateCreated":"2018-04-27T08:43:13+0000","dateStarted":"2018-04-27T09:55:13+0000","dateFinished":"2018-04-27T09:55:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4850"},{"text":"%md\nWe will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.","user":"admin","dateUpdated":"2018-04-27T08:47:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.</p>\n"}]},"apps":[],"jobName":"paragraph_1524818656453_735773714","id":"20180427-084416_1688783838","dateCreated":"2018-04-27T08:44:16+0000","dateStarted":"2018-04-27T08:47:19+0000","dateFinished":"2018-04-27T08:47:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4851"},{"text":"var fileCount = 0\nvar dirCount = 0\nval BUFFER_SIZE = 4096\nval tais = new TarArchiveInputStream(new GzipCompressorInputStream( new BufferedInputStream( new FileInputStream(archizePath))))\n\nvar entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n\nwhile(entry != null){\n    if (entry.isDirectory()) {\n        new File(DATA_PATH + entry.getName()).mkdirs()\n        dirCount = dirCount + 1\n        fileCount = 0\n    }\n    else {\n        \n        val data = new Array[scala.Byte](4 * BUFFER_SIZE)\n\n        val fos = new FileOutputStream(DATA_PATH + entry.getName());\n        val dest = new BufferedOutputStream(fos, BUFFER_SIZE);\n        var count = tais.read(data, 0, BUFFER_SIZE)\n        \n        while (count != -1) {\n            dest.write(data, 0, count)\n            count = tais.read(data, 0, BUFFER_SIZE)\n        }\n        \n        dest.close()\n        fileCount = fileCount + 1\n    }\n    if(fileCount % 1000 == 0){\n        print(\".\")\n    }\n    \n    entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n}","user":"admin","dateUpdated":"2018-04-27T09:55:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fileCount: Int = 0\ndirCount: Int = 0\nBUFFER_SIZE: Int = 4096\ntais: org.apache.commons.compress.archivers.tar.TarArchiveInputStream = org.apache.commons.compress.archivers.tar.TarArchiveInputStream@49cbc08f\nentry: org.apache.commons.compress.archivers.tar.TarArchiveEntry = org.apache.commons.compress.archivers.tar.TarArchiveEntry@35281714\n..................."}]},"apps":[],"jobName":"paragraph_1524818839131_-237581352","id":"20180427-084719_19470875","dateCreated":"2018-04-27T08:47:19+0000","dateStarted":"2018-04-27T09:55:17+0000","dateFinished":"2018-04-27T09:55:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4852"},{"text":"%md\n### DataSetIterators","user":"admin","dateUpdated":"2018-04-27T08:47:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>DataSetIterators</h3>\n"}]},"apps":[],"jobName":"paragraph_1524818863243_-838528485","id":"20180427-084743_1654181620","dateCreated":"2018-04-27T08:47:43+0000","dateStarted":"2018-04-27T08:47:56+0000","dateFinished":"2018-04-27T08:47:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4853"},{"text":"%md\nNext we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 4000 examples which will be represented by a single DataSetIterator, and the testing data will have 1000 examples which will be represented by a separate DataSetIterator.","user":"admin","dateUpdated":"2018-04-27T09:11:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Next we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 4000 examples which will be represented by a single DataSetIterator, and the testing data will have 1000 examples which will be represented by a separate DataSetIterator.</p>\n"}]},"apps":[],"jobName":"paragraph_1524818876570_-1225970628","id":"20180427-084756_600711638","dateCreated":"2018-04-27T08:47:56+0000","dateStarted":"2018-04-27T09:11:11+0000","dateFinished":"2018-04-27T09:11:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4854"},{"text":"val path = FilenameUtils.concat(DATA_PATH, \"instacart/\") // set parent directory\n\nval featureBaseDir = FilenameUtils.concat(path, \"features\") // set feature directory\nval targetsBaseDir = FilenameUtils.concat(path, \"breakfast\") // set label directory","user":"admin","dateUpdated":"2018-04-27T09:55:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = /tmp/dl4j_instacart/instacart/\nfeatureBaseDir: String = /tmp/dl4j_instacart/instacart/features\ntargetsBaseDir: String = /tmp/dl4j_instacart/instacart/breakfast\n"}]},"apps":[],"jobName":"paragraph_1524818901671_1989037154","id":"20180427-084821_1455072896","dateCreated":"2018-04-27T08:48:21+0000","dateStarted":"2018-04-27T09:55:22+0000","dateFinished":"2018-04-27T09:55:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4855"},{"text":"%md\n\nWe first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Then the SequenceRecordReaderDataSetIterators can be created using the RecordReaders. Since each example has sequences of different lengths, an alignment mode of align end is needed.","user":"admin","dateUpdated":"2018-04-27T09:37:47+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Then the SequenceRecordReaderDataSetIterators can be created using the RecordReaders. Since each example has sequences of different lengths, an alignment mode of align end is needed.</p>\n"}]},"apps":[],"jobName":"paragraph_1524820275313_-1587614336","id":"20180427-091115_1295205739","dateCreated":"2018-04-27T09:11:15+0000","dateStarted":"2018-04-27T09:37:47+0000","dateFinished":"2018-04-27T09:37:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4856"},{"text":"val trainFeatures = new CSVSequenceRecordReader(1, \",\");\ntrainFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 1, 4000));\nval trainLabels = new CSVSequenceRecordReader(1, \" \");\ntrainLabels.initialize(new NumberedFileInputSplit(targetsBaseDir + \"/%d.csv\", 1, 4000));\n\nval train = new SequenceRecordReaderDataSetIterator(trainFeatures, trainLabels, 32,\n    2, false, SequenceRecordReaderDataSetIterator.AlignmentMode.ALIGN_END);\n\nval testFeatures = new CSVSequenceRecordReader(1, \",\");\ntestFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 4001, 5000));\nval testLabels = new CSVSequenceRecordReader(1, \" \");\ntestLabels.initialize(new NumberedFileInputSplit(targetsBaseDir + \"/%d.csv\", 4001, 5000));\n\nval test = new SequenceRecordReaderDataSetIterator(testFeatures, testLabels, 32,\n    2, false, SequenceRecordReaderDataSetIterator.AlignmentMode.ALIGN_END);;","user":"admin","dateUpdated":"2018-04-27T20:33:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@10e22fed\ntrainLabels: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@40512ac3\ntrain: org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator = org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator@37613d1e\ntestFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@43fbece1\ntestLabels: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@11d0d92e\ntest: org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator = org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator@7c95230a\n"}]},"apps":[],"jobName":"paragraph_1524818936413_-123356901","id":"20180427-084856_1924041114","dateCreated":"2018-04-27T08:48:56+0000","dateStarted":"2018-04-27T20:33:06+0000","dateFinished":"2018-04-27T20:33:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4857"},{"text":"%md \n\n### Neural Network","user":"admin","dateUpdated":"2018-04-27T09:14:05+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Neural Network</h3>\n"}]},"apps":[],"jobName":"paragraph_1524820382786_-1497274442","id":"20180427-091302_1119629475","dateCreated":"2018-04-27T09:13:02+0000","dateStarted":"2018-04-27T09:14:05+0000","dateFinished":"2018-04-27T09:14:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4858"},{"text":"%md\nThe next task is to set up the neural network configuration. We will use a MultiLayerNetwork and the configuration will be similar to the multitask model from before. Again we use one GravesLSTM layer but this time only one RnnOutputLayer.\n","user":"admin","dateUpdated":"2018-04-27T09:42:01+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The next task is to set up the neural network configuration. We will use a MultiLayerNetwork and the configuration will be similar to the multitask model from before. Again we use one GravesLSTM layer but this time only one RnnOutputLayer.</p>\n"}]},"apps":[],"jobName":"paragraph_1524820446725_1279766498","id":"20180427-091406_433497358","dateCreated":"2018-04-27T09:14:06+0000","dateStarted":"2018-04-27T09:42:01+0000","dateFinished":"2018-04-27T09:42:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4859"},{"text":"val conf = new NeuralNetConfiguration.Builder()\n    .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n    .seed(12345)\n    .dropOut(0.25)\n    .weightInit(WeightInit.XAVIER)\n    .updater(Updater.ADAM)\n    .list()\n    .layer(0, new GravesLSTM.Builder()\n        .activation(Activation.TANH)\n        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n        .gradientNormalizationThreshold(10)\n        .nIn(134)\n        .nOut(150)\n        .build())\n    .layer(1, new RnnOutputLayer.Builder(LossFunction.XENT)\n        .activation(Activation.SOFTMAX)\n        .nIn(150)\n        .nOut(2)\n        .build())\n.pretrain(false).backprop(true)\n.build();","user":"admin","dateUpdated":"2018-04-27T20:33:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were 1 deprecation warning(s); re-run with -deprecation for details\nconf: org.deeplearning4j.nn.conf.MultiLayerConfiguration = \n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"gravesLSTM\" : {\n        \"activationFn\" : {\n          \"TanH\" : { }\n        },\n        \"biasInit\" : 0.0,\n        \"biasUpdater\" : null,\n        \"constraints\" : null,\n        \"dist\" : null,\n        \"forgetGateBiasInit\" : 1.0,\n        \"gateActivationFn\" : {\n          \"Sigmoid\" : { }\n        },\n        \"gradientNormalization\" : \"ClipElementWiseAbsoluteValue\",\n        \"gradientNormalizationThreshold\" : 10.0,\n        \"idropout\" : {\n          \"@class\" : \"org.deeplearning4j.nn.conf.dropout.Dropout\",\n     ..."}]},"apps":[],"jobName":"paragraph_1524819174929_-1697812341","id":"20180427-085254_1614475634","dateCreated":"2018-04-27T08:52:54+0000","dateStarted":"2018-04-27T20:33:12+0000","dateFinished":"2018-04-27T20:33:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4860"},{"text":"%md\n\nWe must then initialize the neural network.","user":"admin","dateUpdated":"2018-04-27T09:15:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We must then initialize the neural network.</p>\n"}]},"apps":[],"jobName":"paragraph_1524820531306_845693118","id":"20180427-091531_1654516559","dateCreated":"2018-04-27T09:15:31+0000","dateStarted":"2018-04-27T09:15:57+0000","dateFinished":"2018-04-27T09:15:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4861"},{"text":"val net = new MultiLayerNetwork(conf);\nnet.init();","user":"admin","dateUpdated":"2018-04-27T20:33:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@7611a924\n"}]},"apps":[],"jobName":"paragraph_1524819256836_26186184","id":"20180427-085416_2130664426","dateCreated":"2018-04-27T08:54:16+0000","dateStarted":"2018-04-27T20:33:15+0000","dateFinished":"2018-04-27T20:33:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4862"},{"text":"%md\n\n### Model Training","user":"admin","dateUpdated":"2018-04-27T09:16:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Training</h3>\n"}]},"apps":[],"jobName":"paragraph_1524820569011_-435258564","id":"20180427-091609_209488885","dateCreated":"2018-04-27T09:16:09+0000","dateStarted":"2018-04-27T09:16:11+0000","dateFinished":"2018-04-27T09:16:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4863"},{"text":"%md\nTo train the model, we use 5 epochs with a for loop and simply call the fit method of the MultiLayerNetwork.","user":"admin","dateUpdated":"2018-04-27T09:42:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To train the model, we use 5 epochs with a for loop and simply call the fit method of the MultiLayerNetwork.</p>\n"}]},"apps":[],"jobName":"paragraph_1524820572433_1299958976","id":"20180427-091612_690496444","dateCreated":"2018-04-27T09:16:12+0000","dateStarted":"2018-04-27T09:42:50+0000","dateFinished":"2018-04-27T09:42:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4864"},{"text":"for( epoch <- 1 to 5){\n    println(\"Epoch \"+ epoch);\n    net.fit( train );\n    train.reset();\n}","user":"admin","dateUpdated":"2018-04-27T20:33:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Epoch 1\nEpoch 2\nEpoch 3\nEpoch 4\nEpoch 5\n"}]},"apps":[],"jobName":"paragraph_1524819288318_910769877","id":"20180427-085448_34088845","dateCreated":"2018-04-27T08:54:48+0000","dateStarted":"2018-04-27T20:33:17+0000","dateFinished":"2018-04-27T20:41:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4865"},{"text":"%md\n### Model Evaluation","user":"admin","dateUpdated":"2018-04-27T09:16:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Evaluation</h3>\n"}]},"apps":[],"jobName":"paragraph_1524820600813_-1375923652","id":"20180427-091640_1250025060","dateCreated":"2018-04-27T09:16:40+0000","dateStarted":"2018-04-27T09:16:43+0000","dateFinished":"2018-04-27T09:16:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4866"},{"text":"%md\nWe will now evaluate our trained model. Note that we will use the area under the curve (AUC) metric of the ROC curve.  ","user":"admin","dateUpdated":"2018-04-27T09:43:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will now evaluate our trained model. Note that we will use the area under the curve (AUC) metric of the ROC curve.</p>\n"}]},"apps":[],"jobName":"paragraph_1524820817964_1112153896","id":"20180427-092017_454140891","dateCreated":"2018-04-27T09:20:17+0000","dateStarted":"2018-04-27T09:43:28+0000","dateFinished":"2018-04-27T09:43:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4867"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524861248054_89570861","id":"20180427-203408_907330565","dateCreated":"2018-04-27T20:34:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6831","text":"// Evaluate the model\n\nval roc = new ROC(100);\n\nwhile(test.hasNext()){\n    val next = test.next();\n    val features = next.getFeatures();\n    val output = net.output(features);\n    roc.evalTimeSeries(next.getLabels(), output);\n}\nprintln(roc.calculateAUC());","dateUpdated":"2018-04-27T20:42:01+0000","dateFinished":"2018-04-27T20:42:09+0000","dateStarted":"2018-04-27T20:42:01+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"roc: org.deeplearning4j.eval.ROC = ROC(thresholdSteps=100, countActualPositive=0, countActualNegative=0, counts={0.0=ROC.CountsForThreshold(threshold=0.0, countTruePositive=0, countFalsePositive=0), 0.01=ROC.CountsForThreshold(threshold=0.01, countTruePositive=0, countFalsePositive=0), 0.02=ROC.CountsForThreshold(threshold=0.02, countTruePositive=0, countFalsePositive=0), 0.03=ROC.CountsForThreshold(threshold=0.03, countTruePositive=0, countFalsePositive=0), 0.04=ROC.CountsForThreshold(threshold=0.04, countTruePositive=0, countFalsePositive=0), 0.05=ROC.CountsForThreshold(threshold=0.05, countTruePositive=0, countFalsePositive=0), 0.06=ROC.CountsForThreshold(threshold=0.06, countTruePositive=0, countFalsePositive=0), 0.07=ROC.CountsForThreshold(threshold=0.07, countTruePositive=0, count...0.6418342941582758\n"}]}},{"text":"%md\n\nWe achieve a AUC of 0.64!","user":"admin","dateUpdated":"2018-04-27T10:06:38+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We achieve a AUC of 0.64!</p>\n"}]},"apps":[],"jobName":"paragraph_1524821309055_691712004","id":"20180427-092829_1280525034","dateCreated":"2018-04-27T09:28:29+0000","dateStarted":"2018-04-27T10:06:38+0000","dateFinished":"2018-04-27T10:06:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4869"},{"text":"%md\n","user":"admin","dateUpdated":"2018-04-27T09:30:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524821420037_994073210","id":"20180427-093020_2025344795","dateCreated":"2018-04-27T09:30:20+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:4870"}],"name":"Instacart Single Task","id":"2DEJE1CSA","angularObjects":{"2DBPZPAXV:existing_process":[],"2DD1TMEUE:existing_process":[],"2DE6CC95C:existing_process":[],"2DBZMBKYM:existing_process":[],"2DDE36HCA:existing_process":[],"2DCP78WSK:existing_process":[],"2DB7GVG57:existing_process":[],"2DCFE6NB4:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}